class Item:
    def __init__(self, value, weight):
        self.value = value
        self.weight = weight

def fractionalKnapsack(W, arr):
    # Sorting items by value-to-weight ratio in descending order
    arr.sort(key=lambda x: (x.value / x.weight), reverse=True)

    # Result (value in Knapsack)
    final_value = 0.0

    # Loop through all items
    for item in arr:
        # If adding the item doesn't exceed capacity, add it completely
        if item.weight <= W:
            W -= item.weight
            final_value += item.value
        # If we can't add the entire item, add fractional part of it
        else:
            final_value += item.value * W / item.weight
            break

    # Returning the maximum value in the knapsack
    return final_value

# Driver code
if __name__ == "__main__":
    # Getting knapsack capacity from user
    W = float(input("Enter the total weight capacity of the knapsack: "))

    # Getting the number of items
    n = int(input("Enter the number of items: "))

    # List to store items
    arr = []
    for i in range(n):
        value = float(input(f"Enter value for item {i + 1}: "))
        weight = float(input(f"Enter weight for item {i + 1}: "))
        arr.append(Item(value, weight))

    # Function call
    max_val = fractionalKnapsack(W, arr)
    print("Maximum value in Knapsack =", max_val)
