import heapq

class Node:
    def __init__(self, freq, symbol, left=None, right=None):
        # frequency of symbol
        self.freq = freq
        # symbol name (character)
        self.symbol = symbol
        # node left of current node
        self.left = left
        # node right of current node
        self.right = right
        # tree direction (0/1)
        self.huff = ''
  
    def __lt__(self, nxt):
        return self.freq < nxt.freq

# Utility function to print Huffman codes for all symbols in the newly created Huffman tree
def printNodes(node, val=''):
    # Huffman code for current node
    newVal = val + str(node.huff)

    # Traverse inside it if node is not an edge node
    if node.left:
        printNodes(node.left, newVal)
    if node.right:
        printNodes(node.right, newVal)

    # If node is an edge node, display its Huffman code
    if not node.left and not node.right:
        print(f"{node.symbol} -> {newVal}")

# Get user input for characters and their frequencies
chars = input("Enter the characters separated by spaces: ").split()
freq = list(map(int, input("Enter the frequencies separated by spaces: ").split()))

# Check if inputs are valid
if len(chars) != len(freq):
    print("Error: The number of characters and frequencies must be the same.")
else:
    # List containing unused nodes
    nodes = []

    # Converting characters and frequencies into Huffman tree nodes
    for x in range(len(chars)):
        heapq.heappush(nodes, Node(freq[x], chars[x]))

    while len(nodes) > 1:
        # Remove two nodes with the lowest frequency
        left = heapq.heappop(nodes)
        right = heapq.heappop(nodes)

        # Assign directional value to nodes
        left.huff = 0
        right.huff = 1

        # Create a new parent node combining the two smallest nodes
        newNode = Node(left.freq + right.freq, left.symbol + right.symbol, left, right)
        heapq.heappush(nodes, newNode)

    # Print Huffman codes
    print("Huffman Codes:")
    printNodes(nodes[0])