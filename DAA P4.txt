# Recursive function to solve the knapsack problem
def knapsack(W, wt, val, n):
    # Base Case: If no items left or capacity is 0, return 0
    if n == 0 or W == 0:
        return 0

    # If the weight of the nth item is more than the capacity W,
    # skip the item
    if wt[n - 1] > W:
        return knapsack(W, wt, val, n - 1)

    # Else, find the maximum of including or not including the nth item
    else:
        return max(
            val[n - 1] + knapsack(W - wt[n - 1], wt, val, n - 1),  # Include the item
            knapsack(W, wt, val, n - 1)                            # Exclude the item
        )

# Driver Code
val = [60, 100, 120]
wt = [10, 20, 30]
W = 50
n = len(val)
print(knapsack(W, wt, val, n))  # Expected output: 220
